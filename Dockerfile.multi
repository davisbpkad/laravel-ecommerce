# Multi-stage build for Laravel E-commerce
FROM php:8.2-cli as base

# Install system dependencies
RUN apt-get update && apt-get install -y \
    git \
    curl \
    libpng-dev \
    libonig-dev \
    libxml2-dev \
    zip \
    unzip \
    libpq-dev \
    nodejs \
    npm

# Clear cache
RUN apt-get clean && rm -rf /var/lib/apt/lists/*

# Install PHP extensions
RUN docker-php-ext-install pdo_mysql pdo_pgsql mbstring exif pcntl bcmath gd

# Install Composer
COPY --from=composer:latest /usr/bin/composer /usr/bin/composer

# Set working directory
WORKDIR /app

# Build stage
FROM base as builder

# Copy package files first for better caching
COPY package*.json ./
COPY composer.json composer.lock ./

# Copy build configuration files
COPY .env.build .env
COPY fake-artisan fake-artisan
COPY vite.config.ts vite.production.config.ts tsconfig.json ./

# Install dependencies
RUN chmod +x fake-artisan
RUN cp fake-artisan artisan
RUN COMPOSER_MEMORY_LIMIT=-1 composer install \
    --no-dev \
    --optimize-autoloader \
    --no-interaction \
    --no-scripts \
    --no-plugins \
    --prefer-dist

# Install Node.js dependencies
RUN npm ci --silent --no-audit

# Copy source code
COPY resources/ resources/
COPY public/ public/

# Build frontend assets
RUN export NODE_OPTIONS="--max-old-space-size=4096" && \
    (npm run build || \
     npx vite build --mode production || \
     (echo "Build failed, creating fallback..." && \
      mkdir -p public/build/assets && \
      echo "/* Fallback styles */" > public/build/assets/app.css && \
      echo "console.log('Fallback JS loaded');" > public/build/assets/app.js && \
      echo '{"resources/js/app.ts":{"file":"assets/app.js","name":"app","isEntry":true,"css":["assets/app.css"]}}' > public/build/manifest.json))

# Production stage
FROM base as production

# Copy built application from builder
COPY --from=builder /app/vendor /app/vendor
COPY --from=builder /app/public /app/public

# Copy application source
COPY . .

# Create production .env
RUN echo "APP_ENV=production" > .env && \
    echo "APP_DEBUG=false" >> .env && \
    echo "APP_URL=\${RAILWAY_STATIC_URL}" >> .env && \
    echo "DB_CONNECTION=pgsql" >> .env && \
    echo "DB_HOST=\${PGHOST}" >> .env && \
    echo "DB_PORT=\${PGPORT}" >> .env && \
    echo "DB_DATABASE=\${PGDATABASE}" >> .env && \
    echo "DB_USERNAME=\${PGUSER}" >> .env && \
    echo "DB_PASSWORD=\${PGPASSWORD}" >> .env && \
    echo "PORT=\${PORT}" >> .env

# Make scripts executable
RUN chmod +x railway-start.sh

# Expose port
EXPOSE 8000

# Command to run the application
CMD ["bash", "railway-start.sh"]
